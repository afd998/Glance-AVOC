import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '../lib/supabase';
import { Database } from '../types/supabase';
import { formatTime, formatDate } from '../utils/timeUtils';
import {
  getResourceIcon,
  getResourceDisplayName,
  getEventThemeHexColors,
} from '../utils/eventUtils';
import { useEventResources } from '../hooks/useEvents';

type Event = Database['public']['Tables']['events']['Row'];

// Helper function to convert HH:MM:SS strings into float hours for formatTime
const timeToFloatHours = (timeString: string | null): number => {
  if (!timeString) return 0;
  try {
    const [hours, minutes] = timeString.split(':').map(Number);
    return hours + minutes / 60;
  } catch (error) {
    console.error('Error converting time to float hours:', timeString, error);
    return 0;
  }
};

// Convert palette hex values into rgba strings for soft backgrounds and overlays
const hexToRgba = (hex: string | undefined, alpha: number): string => {
  if (!hex || typeof hex !== 'string') {
    return `rgba(79, 70, 229, ${alpha})`;
  }

  let normalized = hex.trim();
  if (!normalized.startsWith('#')) {
    return `rgba(79, 70, 229, ${alpha})`;
  }

  if (normalized.length === 4) {
    normalized = `#${normalized[1]}${normalized[1]}${normalized[2]}${normalized[2]}${normalized[3]}${normalized[3]}`;
  }

  if (normalized.length !== 7) {
    return `rgba(79, 70, 229, ${alpha})`;
  }

  const r = parseInt(normalized.slice(1, 3), 16);
  const g = parseInt(normalized.slice(3, 5), 16);
  const b = parseInt(normalized.slice(5, 7), 16);

  if ([r, g, b].some(Number.isNaN)) {
    return `rgba(79, 70, 229, ${alpha})`;
  }

  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
};

const formatInstructorNames = (instructors: Event['instructor_names']): string => {
  if (!instructors) {
    return 'Instructor TBD';
  }

  if (Array.isArray(instructors)) {
    const readable = instructors.map((name) => String(name)).filter(Boolean);
    if (readable.length === 0) return 'Instructor TBD';
    if (readable.length <= 2) return readable.join(', ');
    return `${readable.slice(0, 2).join(', ')} +${readable.length - 2} more`;
  }

  if (typeof instructors === 'string' && instructors.trim().length > 0) {
    return instructors;
  }

  return 'Instructor TBD';
};

interface OccurrenceCardProps {
  event: Event;
  index: number;
  isCurrentEvent: boolean;
  totalCards: number;
}

const OccurrenceCard: React.FC<OccurrenceCardProps> = ({
  event,
  index,
  isCurrentEvent,
  totalCards,
}) => {
  const navigate = useNavigate();
  const { data: resourcesData } = useEventResources(event.id);
  const resources = resourcesData?.resources || [];

  const paletteHex = React.useMemo(() => getEventThemeHexColors(event), [event]);
  const accentColor = paletteHex?.[6] ?? '#4b5563';
  const mutedAccent = paletteHex?.[4] ?? '#9ca3af';
  const softAccent = paletteHex?.[2] ?? '#e5e7eb';
  const resourcesWithNotes = React.useMemo(
    () => resources.filter((resource: any) => Boolean(resource.instruction)),
    [resources]
  );

  const handleCardClick = React.useCallback(() => {
    const eventDate = event.date || '';
    navigate(`/${eventDate}/${event.id}`);
  }, [event.date, event.id, navigate]);

  const handleKeyDown = (keyboardEvent: React.KeyboardEvent<HTMLDivElement>) => {
    if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {
      keyboardEvent.preventDefault();
      handleCardClick();
    }
  };

  return (
    <div className="group relative" role="listitem">
      <span
        aria-hidden="true"
        className="absolute inset-y-4 left-0 w-[3px] rounded-full transition-transform duration-300 group-hover:scale-y-105"
        style={{ backgroundColor: accentColor }}
      />
      <div
        role="button"
        tabIndex={0}
        onClick={handleCardClick}
        onKeyDown={handleKeyDown}
        className="relative flex flex-col gap-4 rounded-2xl border px-5 py-4 text-left shadow-sm transition-all duration-300 ease-out hover:-translate-y-0.5 hover:shadow-lg focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-900/20 focus-visible:ring-offset-2"
        style={{
          borderColor: isCurrentEvent ? accentColor : hexToRgba(accentColor, 0.28),
          boxShadow: isCurrentEvent
            ? `0 18px 38px -20px ${hexToRgba(accentColor, 0.55)}`
            : undefined,
        }}
      >
        <div className="flex flex-wrap items-start justify-between gap-4">
          <div className="space-y-1">
            <p className="text-xs font-semibold uppercase tracking-wide text-gray-500 dark:text-gray-400">
              Occurrence
            </p>
            <p className="text-lg font-semibold text-gray-900 dark:text-gray-100">
              {formatDate(event.date || '')}
            </p>
            <p className="text-sm text-gray-600 dark:text-gray-300">
              {formatTime(timeToFloatHours(event.start_time))} - {formatTime(timeToFloatHours(event.end_time))}
            </p>
          </div>

          <div className="flex flex-col items-end gap-2 text-right">
            {isCurrentEvent && (
              <span
                className="inline-flex items-center rounded-full border px-3 py-1 text-xs font-semibold uppercase tracking-wide"
                style={{
                  backgroundColor: hexToRgba(softAccent, 0.45),
                  borderColor: accentColor,
                  color: accentColor,
                }}
              >
                Current
              </span>
            )}
            <span className="text-xs text-gray-500 dark:text-gray-400">
              {index + 1} of {totalCards}
            </span>
          </div>
        </div>

        <div className="grid gap-4 sm:grid-cols-2">
          <div className="space-y-1">
            <p className="text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400">Room</p>
            <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
              {event.room_name || 'Unknown Room'}
            </p>
            <p className="text-sm text-gray-600 dark:text-gray-300">
              {formatInstructorNames(event.instructor_names)}
            </p>
          </div>

          <div className="space-y-1">
            <p className="text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400">Event Type</p>
            <p className="text-sm font-medium text-gray-900 dark:text-gray-100">
              {event.event_type || 'Uncategorized'}
            </p>
            {event.section && (
              <p className="text-sm text-gray-600 dark:text-gray-300">Section {event.section}</p>
            )}
          </div>
        </div>

        {resources.length > 0 && (
          <div>
            <p className="text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400">Resources</p>
            <div className="mt-2 flex flex-wrap gap-2">
              {resources.map((item: any, resourceIndex: number) => (
                <div
                  key={`${event.id}-resource-${resourceIndex}`}
                  className="inline-flex items-center gap-2 rounded-full border border-gray-200/80 bg-gray-50/90 px-3 py-1 text-xs font-medium text-gray-600 transition-colors hover:border-gray-300 dark:border-gray-700 dark:bg-gray-800/80 dark:text-gray-200"
                >
                  <span className="text-sm" aria-hidden="true">
                    {getResourceIcon(item.itemName)}
                  </span>
                  <span>{getResourceDisplayName(item.itemName)}</span>
                  {item.quantity && item.quantity > 1 && (
                    <span className="text-[10px] font-semibold uppercase text-gray-500 dark:text-gray-300">
                      x{item.quantity}
                    </span>
                  )}
                </div>
              ))}
            </div>
            {resourcesWithNotes.length > 0 && (
              <div className="mt-2 space-y-1 text-xs text-gray-500 dark:text-gray-400">
                {resourcesWithNotes.map((resource: any, resourceIndex: number) => (
                  <div key={`${event.id}-instruction-${resourceIndex}`} className="flex items-start gap-2">
                    <span className="mt-[3px] inline-block h-1.5 w-1.5 rounded-full bg-gray-300 dark:bg-gray-600" />
                    <span className="flex-1 leading-relaxed" title={resource.instruction}>
                      {resource.instruction}
                    </span>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default function OccurrencesPage() {
  const { eventId } = useParams<{ eventId: string }>();
  const navigate = useNavigate();

  const { data: currentEvent } = useQuery({
    queryKey: ['event', eventId],
    queryFn: async (): Promise<Event | null> => {
      if (!eventId) return null;

      const { data, error } = await supabase
        .from('events')
        .select('*')
        .eq('id', parseInt(eventId, 10))
        .single();

      if (error) {
        console.error('Error fetching current event:', error);
        throw error;
      }

      return data;
    },
    enabled: !!eventId,
  });

  const {
    data: occurrences,
    isLoading,
    error,
  } = useQuery({
    queryKey: ['occurrences', currentEvent?.event_name],
    queryFn: async (): Promise<Event[]> => {
      if (!currentEvent?.event_name) {
        return [];
      }

      const { data, error: occurrencesError } = await supabase
        .from('events')
        .select('*')
        .eq('event_name', currentEvent.event_name)
        .order('start_time', { ascending: true });

      if (occurrencesError) {
        console.error('Error fetching occurrences:', occurrencesError);
        throw occurrencesError;
      }

      return data || [];
    },
    enabled: !!currentEvent?.event_name,
    staleTime: 5 * 60 * 1000,
  });

  const paletteHex = React.useMemo(() => {
    if (!currentEvent) {
      return null;
    }
    return getEventThemeHexColors(currentEvent);
  }, [currentEvent]);

  const headerGradient = React.useMemo(() => {
    if (!paletteHex) {
      return 'linear-gradient(135deg, rgba(249, 250, 251, 0.95) 0%, rgba(229, 231, 235, 0.8) 65%, rgba(209, 213, 219, 0.72) 100%)';
    }

    return `linear-gradient(135deg, ${hexToRgba(paletteHex[1], 0.95)} 0%, ${hexToRgba(paletteHex[3], 0.7)} 50%, ${hexToRgba(paletteHex[5], 0.65)} 100%)`;
  }, [paletteHex]);

  const accentColor = paletteHex?.[6] ?? '#4b5563';

  const occurrencePosition = React.useMemo(() => {
    if (!occurrences || !currentEvent) {
      return null;
    }
    const index = occurrences.findIndex((occurrence) => occurrence.id === currentEvent.id);
    if (index === -1) {
      return null;
    }
    return {
      index: index + 1,
      total: occurrences.length,
    };
  }, [occurrences, currentEvent]);

  const handleClose = () => {
    navigate(-1);
  };

  if (!currentEvent) {
    return (
      <div className="rounded-3xl border border-gray-200 bg-white p-6 text-center shadow-xl dark:border-gray-700 dark:bg-gray-900 dark:text-gray-200">
        Event not found
      </div>
    );
  }

  return (
    <div className="relative w-full max-w-3xl">
      <div
        className="overflow-hidden rounded-3xl border bg-white/98 shadow-2xl ring-1 ring-black/5 dark:border-gray-800/70 dark:bg-gray-950/95 dark:ring-white/10"
        style={{ borderColor: hexToRgba(paletteHex?.[4], 0.45) }}
      >
        <div className="relative" style={{ background: headerGradient }}>
          <div
            className="pointer-events-none absolute inset-0 opacity-25"
            style={{
              background: `radial-gradient(circle at top right, ${hexToRgba(paletteHex?.[6], 0.35)}, transparent 60%)`,
            }}
          />
          <div className="relative px-8 py-6 text-gray-900 dark:text-gray-100">
            <div className="flex flex-wrap items-start justify-between gap-4">
              <div className="space-y-2">
                <p className="text-xs font-semibold uppercase tracking-[0.24em] text-gray-600/90 dark:text-gray-300/90">
                  Occurrences
                </p>
                <h2 className="text-2xl font-semibold leading-snug sm:text-3xl">{currentEvent.event_name}</h2>
                <p className="text-sm text-gray-700/90 dark:text-gray-300/90">
                  {formatInstructorNames(currentEvent.instructor_names)}
                </p>
              </div>

              <div className="flex flex-col items-end gap-3">
                <span
                  className="inline-flex items-center rounded-full border px-3 py-1 text-xs font-semibold uppercase tracking-wide"
                  style={{
                    borderColor: accentColor,
                    color: accentColor,
                    backgroundColor: hexToRgba(paletteHex?.[1], 0.5),
                  }}
                >
                  {currentEvent.event_type || 'Uncategorized'}
                </span>
                <button
                  type="button"
                  onClick={handleClose}
                  className="inline-flex h-9 w-9 items-center justify-center rounded-full border border-black/10 bg-white/80 text-gray-600 transition-colors duration-200 hover:border-black/20 hover:text-gray-900 dark:border-white/10 dark:bg-gray-950/70 dark:text-gray-400 dark:hover:text-gray-100"
                  aria-label="Close occurrences modal"
                >
                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.6} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>

            <div className="mt-6 grid gap-6 text-sm text-gray-700 dark:text-gray-200 sm:grid-cols-3">
              <div>
                <p className="text-xs uppercase tracking-wide text-gray-600/90 dark:text-gray-400">Current Date</p>
                <p className="mt-1 text-base font-semibold text-gray-900 dark:text-gray-100">
                  {formatDate(currentEvent.date || '')}
                </p>
                <p className="text-sm text-gray-700 dark:text-gray-300">
                  {formatTime(timeToFloatHours(currentEvent.start_time))} - {formatTime(timeToFloatHours(currentEvent.end_time))}
                </p>
              </div>

              <div>
                <p className="text-xs uppercase tracking-wide text-gray-600/90 dark:text-gray-400">Room</p>
                <p className="mt-1 text-base font-semibold text-gray-900 dark:text-gray-100">
                  {currentEvent.room_name || 'Unknown Room'}
                </p>
                {currentEvent.section && (
                  <p className="text-sm text-gray-700 dark:text-gray-300">Section {currentEvent.section}</p>
                )}
              </div>

              <div>
                <p className="text-xs uppercase tracking-wide text-gray-600/90 dark:text-gray-400">Occurrences</p>
                <p className="mt-1 text-base font-semibold text-gray-900 dark:text-gray-100">
                  {occurrencePosition ? `${occurrencePosition.index} of ${occurrencePosition.total}` : occurrences?.length || 0}
                </p>
                <p className="text-sm text-gray-700 dark:text-gray-300">Event ID #{currentEvent.id}</p>
              </div>
            </div>
          </div>
        </div>

        <div
          className="bg-gray-50/70 px-8 py-6 dark:bg-gray-900/70"
          style={{ borderTop: `1px solid ${hexToRgba(paletteHex?.[3], 0.4)}` }}
        >
          {isLoading ? (
            <div className="flex items-center justify-center py-12 text-gray-500 dark:text-gray-400">
              <div className="h-10 w-10 animate-spin rounded-full border-2 border-gray-300 border-t-transparent dark:border-gray-600" />
            </div>
          ) : error ? (
            <div className="rounded-2xl border border-red-200/70 bg-white/95 px-6 py-8 text-center text-red-600 dark:border-red-500/40 dark:bg-gray-950/90 dark:text-red-300">
              Error loading occurrences
            </div>
          ) : occurrences && occurrences.length > 0 ? (
            <div className="max-h-[55vh] space-y-4 overflow-y-auto pr-1" role="list">
              {occurrences.map((event, index) => (
                <OccurrenceCard
                  key={event.id}
                  event={event}
                  index={index}
                  isCurrentEvent={event.id === parseInt(eventId || '0', 10)}
                  totalCards={occurrences.length}
                />
              ))}
            </div>
          ) : (
            <div className="rounded-2xl border border-dashed border-gray-300/80 bg-white/95 px-6 py-10 text-center text-gray-600 dark:border-gray-700 dark:bg-gray-950/80 dark:text-gray-300">
              No other occurrences found
            </div>
          )}
        </div>
      </div>
    </div>
  );
}



