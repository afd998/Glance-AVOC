diff --git a/Glance-AVOC/src/pages/OccurrencesPage.tsx b/Glance-AVOC/src/pages/OccurrencesPage.tsx
diff --git a/Glance-AVOC/src/pages/OccurrencesPage.tsx b/Glance-AVOC/src/pages/OccurrencesPage.tsx
index 05a04c9..2b7f087 100644
--- a/Glance-AVOC/src/pages/OccurrencesPage.tsx
+++ b/Glance-AVOC/src/pages/OccurrencesPage.tsx
@@
-import { formatTime, formatDate } from '../utils/timeUtils';
-import { getResourceIcon, getResourceDisplayName, getEventThemeColors } from '../utils/eventUtils';
+import { formatTime, formatDate } from '../utils/timeUtils';
+import {
+  getResourceIcon,
+  getResourceDisplayName,
+  getEventThemeHexColors
+} from '../utils/eventUtils';
@@
 const timeToFloatHours = (timeString: string | null): number => {
   if (!timeString) return 0;
@@
 };
 
+const appendAlpha = (hex?: string, alpha = 'ff') =>
+  hex ? `${hex}${alpha}` : undefined;
+
+const createGradient = (start?: string, end?: string) =>
+  start && end ? `linear-gradient(135deg, ${start}, ${end})` : undefined;
+
 interface OccurrenceCardProps {
   event: Event;
   index: number;
   isCurrentEvent: boolean;
   totalCards: number;
 }
 
 const OccurrenceCard: React.FC<OccurrenceCardProps> = ({
   event,
-  index,
+  index: _index,
   isCurrentEvent,
-  totalCards
+  totalCards: _totalCards
 }) => {
   const navigate = useNavigate();
-  // Get parsed event resources from cache
   const { data: resourcesData } = useEventResources(event.id);
   const resources = resourcesData?.resources || [];
-  // Get theme colors based on event type
-  const themeColors = getEventThemeColors(event);
+  const themeHexColors = getEventThemeHexColors(event);
@@
-  return (
-    <div className="w-full transition-all duration-300 ease-out transform-gpu">
-      <div 
-        className={`rounded-lg shadow-lg p-4 border cursor-pointer hover:shadow-xl transition-all ${
-          isCurrentEvent 
-            ? 'bg-green-50 dark:bg-green-900/20 border-green-500 dark:border-green-400 shadow-green-200/50 dark:shadow-green-900/30 ring-2 ring-green-200 dark:ring-green-800/30' 
-            : 'bg-white/95 dark:bg-gray-800/95 border-gray-200 dark:border-gray-600 shadow-gray-200/50 dark:shadow-gray-900/30 hover:bg-white dark:hover:bg-gray-700 hover:shadow-2xl hover:scale-[1.02]'
-        }`}
-        onClick={handleCardClick}
-      >
-        <div className="flex gap-4">
-          {/* Left Column - Basic Info */}
-          <div className="flex-1 space-y-2">
-            <div className="space-y-1">
-              <p className="text-lg font-semibold text-gray-900 dark:text-white">
-                {formatDate(event.date || '')}
-              </p>
-              <p className="text-base font-medium text-gray-700 dark:text-gray-200">
-                {formatTime(timeToFloatHours(event.start_time))} - {formatTime(timeToFloatHours(event.end_time))}
-              </p>
-            </div>
-            <div className="space-y-1 text-sm">
-              <p className="text-gray-800 dark:text-gray-100 font-medium">
-                {event.room_name || 'Unknown Room'}
-              </p>
-              {event.instructor_names && Array.isArray(event.instructor_names) && event.instructor_names.length > 0 && (
-                <p className="text-gray-700 dark:text-gray-300">
-                  {event.instructor_names.length === 1
-                    ? String(event.instructor_names[0])
-                    : `${event.instructor_names.length} instructors`
-                  }
-                </p>
-              )}
-            </div>
-          </div>
-          
-          {/* Right Column - Resources */}
-          <div className="flex-1">
-            {isCurrentEvent && (
-              <div className="mb-3 flex justify-end">
-                <span className="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded">
-                  Current
-                </span>
-              </div>
-            )}
-            {resources.length > 0 && (
-              <div>
-                <p className="text-xs font-medium text-gray-600 dark:text-gray-300 mb-2">Resources:</p>
-                <div className="flex flex-col gap-1">
-                  {resources.map((item, index) => (
-                    <div 
-                      key={`${event.id}-resource-${index}`} 
-                      className="flex flex-col gap-1 p-2 rounded-lg text-xs transition-colors bg-white/80 dark:bg-gray-700/80 border border-gray-200 dark:border-gray-600 hover:bg-white dark:hover:bg-gray-600 shadow-sm hover:shadow-md"
-                    >
-                      <div className="flex items-center gap-2">
-                        <span className="shrink-0 text-sm text-gray-600 dark:text-gray-300">
-                          {getResourceIcon(item.itemName)}
-                        </span>
-                        <span className="font-medium text-gray-800 dark:text-gray-200">{getResourceDisplayName(item.itemName)}</span>
-                        {item.quantity && item.quantity > 1 && (
-                          <span className="ml-1 px-2 py-1 text-xs font-bold rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 shadow-sm border border-blue-200 dark:border-blue-700">
-                            {item.quantity}
-                          </span>
-                        )}
-                      </div>
-                      {item.instruction && (
-                        <div 
-                          className="text-xs mt-1 pl-6 max-w-[200px] truncate text-gray-600 dark:text-gray-400"
-                          title={item.instruction}
-                        >
-                          {item.instruction}
-                        </div>
-                      )}
-                    </div>
-                  ))}
-                </div>
-              </div>
-            )}
-          </div>
-        </div>
-      </div>
-    </div>
-  );
+  const cardStyle = themeHexColors
+    ? {
+        background: createGradient(
+          isCurrentEvent
+            ? appendAlpha(themeHexColors[5], 'f0')
+            : appendAlpha(themeHexColors[1], 'fa'),
+          isCurrentEvent
+            ? appendAlpha(themeHexColors[7], 'f5')
+            : appendAlpha(themeHexColors[3], 'f2')
+        ),
+        borderColor: isCurrentEvent ? themeHexColors[7] : themeHexColors[3],
+        boxShadow: isCurrentEvent
+          ? `0 18px 36px ${appendAlpha(themeHexColors[7], '33')}`
+          : `0 12px 28px ${appendAlpha(themeHexColors[3], '26')}`
+      }
+    : undefined;
+
+  const textPrimaryClass = isCurrentEvent ? 'text-white' : 'text-gray-900';
+  const textSecondaryClass = isCurrentEvent ? 'text-white/90' : 'text-gray-700';
+  const textMutedClass = isCurrentEvent ? 'text-white/70' : 'text-gray-600';
+
+  const resourceItemStyle = themeHexColors
+    ? {
+        backgroundColor: isCurrentEvent
+          ? appendAlpha(themeHexColors[7], '20')
+          : appendAlpha(themeHexColors[1], 'f4'),
+        borderColor: isCurrentEvent
+          ? appendAlpha(themeHexColors[7], '66')
+          : appendAlpha(themeHexColors[3], '55')
+      }
+    : undefined;
+
+  const badgeStyle = themeHexColors
+    ? isCurrentEvent
+      ? {
+          backgroundColor: appendAlpha(themeHexColors[7], 'dd'),
+          color: '#ffffff',
+          borderColor: appendAlpha(themeHexColors[7], 'aa')
+        }
+      : {
+          backgroundColor: appendAlpha(themeHexColors[4], 'f0'),
+          color: '#0f172a',
+          borderColor: appendAlpha(themeHexColors[3], '80')
+        }
+    : undefined;
+
+  return (
+    <div className="w-full transition-all duration-300 ease-out transform-gpu">
+      <div
+        className={`rounded-xl border shadow-lg p-4 cursor-pointer transition-all duration-300 ease-out backdrop-blur-sm hover:shadow-2xl hover:-translate-y-0.5 ${
+          cardStyle
+            ? ''
+            : 'bg-white/95 dark:bg-gray-800/95 border-gray-200 dark:border-gray-600 hover:bg-white dark:hover:bg-gray-700'
+        }`}
+        style={cardStyle}
+        onClick={handleCardClick}
+      >
+        <div className="flex gap-4">
+          <div className="flex-1 space-y-2">
+            <div className="space-y-1">
+              <p className={`text-lg font-semibold ${textPrimaryClass}`}>
+                {formatDate(event.date || '')}
+              </p>
+              <p className={`text-base font-medium ${textSecondaryClass}`}>
+                {formatTime(timeToFloatHours(event.start_time))} -{' '}
+                {formatTime(timeToFloatHours(event.end_time))}
+              </p>
+            </div>
+            <div className="space-y-1 text-sm">
+              <p className={`font-medium ${textSecondaryClass}`}>
+                {event.room_name || 'Unknown Room'}
+              </p>
+              {event.instructor_names &&
+                Array.isArray(event.instructor_names) &&
+                event.instructor_names.length > 0 && (
+                  <p className={textMutedClass}>
+                    {event.instructor_names.length === 1
+                      ? String(event.instructor_names[0])
+                      : `${event.instructor_names.length} instructors`}
+                  </p>
+                )}
+            </div>
+          </div>
+
+          <div className="flex-1">
+            {isCurrentEvent && (
+              <div className="mb-3 flex justify-end">
+                <span
+                  className={`px-2 py-1 text-xs font-medium rounded-full shadow-sm border ${
+                    badgeStyle
+                      ? ''
+                      : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 border-green-200 dark:border-green-700'
+                  }`}
+                  style={badgeStyle}
+                >
+                  Current
+                </span>
+              </div>
+            )}
+            {resources.length > 0 && (
+              <div>
+                <p
+                  className={`text-xs font-semibold uppercase tracking-wide mb-2 ${textMutedClass}`}
+                >
+                  Resources
+                </p>
+                <div className="flex flex-col gap-1">
+                  {resources.map((item, resourceIndex) => (
+                    <div
+                      key={`${event.id}-resource-${resourceIndex}`}
+                      className={`flex flex-col gap-1 p-2 rounded-lg text-xs border transition-colors backdrop-blur-sm shadow-sm hover:shadow-md ${
+                        resourceItemStyle
+                          ? ''
+                          : 'bg-white/80 dark:bg-gray-700/80 border-gray-200 dark:border-gray-600 hover:bg-white dark:hover:bg-gray-600'
+                      }`}
+                      style={resourceItemStyle}
+                    >
+                      <div className="flex items-center gap-2">
+                        <span className={`shrink-0 text-sm ${textMutedClass}`}>
+                          {getResourceIcon(item.itemName)}
+                        </span>
+                        <span className={`font-semibold ${textSecondaryClass}`}>
+                          {getResourceDisplayName(item.itemName)}
+                        </span>
+                        {item.quantity && item.quantity > 1 && (
+                          <span
+                            className={`ml-1 px-2 py-1 text-xs font-bold rounded-full shadow-sm border ${
+                              badgeStyle
+                                ? ''
+                                : 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 border-blue-200 dark:border-blue-700'
+                            }`}
+                            style={badgeStyle}
+                          >
+                            {item.quantity}
+                          </span>
+                        )}
+                      </div>
+                      {item.instruction && (
+                        <div
+                          className={`text-xs mt-1 pl-6 max-w-[220px] truncate ${textMutedClass}`}
+                          title={item.instruction}
+                        >
+                          {item.instruction}
+                        </div>
+                      )}
+                    </div>
+                  ))}
+                </div>
+              </div>
+            )}
+          </div>
+        </div>
+      </div>
+    </div>
+  );
 };
 
 export default function OccurrencesPage() {
   const { eventId } = useParams<{ eventId: string }>();
   const navigate = useNavigate();
-  
-  // Get theme colors for the current event (will be set after currentEvent loads)
-  const [themeColors, setThemeColors] = React.useState<any>(null);
+
+  const [themeHexColors, setThemeHexColors] =
+    React.useState<ReturnType<typeof getEventThemeHexColors> | null>(null);
@@
-  React.useEffect(() => {
-    if (currentEvent) {
-      setThemeColors(getEventThemeColors(currentEvent));
-    }
-  }, [currentEvent]);
+  React.useEffect(() => {
+    if (currentEvent) {
+      setThemeHexColors(getEventThemeHexColors(currentEvent));
+    } else {
+      setThemeHexColors(null);
+    }
+  }, [currentEvent]);
@@
-  if (!currentEvent) {
+  const headerStyle = themeHexColors
+    ? {
+        background: createGradient(
+          appendAlpha(themeHexColors[5], 'f0'),
+          appendAlpha(themeHexColors[7], 'f5')
+        ),
+        borderColor: appendAlpha(themeHexColors[7], '80')
+      }
+    : undefined;
+
+  const contentStyle = themeHexColors
+    ? {
+        background: createGradient(
+          appendAlpha(themeHexColors[1], 'f8'),
+          appendAlpha(themeHexColors[3], 'f2')
+        ),
+        borderColor: appendAlpha(themeHexColors[3], '55')
+      }
+    : undefined;
+
+  const spinnerStyle = themeHexColors
+    ? {
+        borderTopColor: themeHexColors[6],
+        borderLeftColor: appendAlpha(themeHexColors[6], '70')
+      }
+    : {
+        borderTopColor: '#3b82f6',
+        borderLeftColor: '#93c5fd'
+      };
+
+  const errorStyle = themeHexColors ? { color: themeHexColors[8] } : undefined;
+  const emptyStyle = themeHexColors
+    ? { color: appendAlpha(themeHexColors[7], 'e6') }
+    : undefined;
+
+  if (!currentEvent) {
     return (
       <div className="bg-white dark:bg-gray-900 rounded-xl shadow-2xl p-6">
@@
   return (
     <div className="relative bg-transparent w-full max-w-2xl max-h-[80vh] overflow-visible">
       {/* Header */}
-      <div className="bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm rounded-t-xl shadow-lg flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
-        <h2 className="text-xl font-bold text-gray-900 dark:text-white">
+      <div
+        className={`backdrop-blur-sm rounded-t-xl shadow-lg flex items-center justify-between p-6 border ${
+          themeHexColors
+            ? 'text-white'
+            : 'bg-white/95 dark:bg-gray-900/95 text-gray-900 dark:text-white border-gray-200 dark:border-gray-700'
+        }`}
+        style={headerStyle}
+      >
+        <h2 className="text-xl font-bold tracking-tight">
           {currentEvent?.event_name} - Occurrences
         </h2>
         <button
           onClick={handleClose}
-          className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg"
+          className={`p-2 rounded-lg transition-colors ${
+            themeHexColors
+              ? 'border border-white/15 text-white/80 hover:text-white hover:bg-white/10'
+              : 'border border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800'
+          }`}
         >
           <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
           </svg>
         </button>
       </div>
 
       {/* Content */}
-      <div className="bg-linear-to-br from-gray-50/95 to-gray-100/95 dark:from-gray-800/95 dark:to-gray-900/95 backdrop-blur-sm rounded-b-xl shadow-lg p-6 overflow-y-auto max-h-[calc(80vh-120px)] overflow-x-visible border-t border-gray-200 dark:border-gray-700">
+      <div
+        className={`rounded-b-xl shadow-lg p-6 overflow-y-auto max-h-[calc(80vh-120px)] overflow-x-visible border backdrop-blur-sm ${
+          themeHexColors
+            ? ''
+            : 'bg-linear-to-br from-gray-50/95 to-gray-100/95 dark:from-gray-800/95 dark:to-gray-900/95 border-gray-200 dark:border-gray-700'
+        }`}
+        style={contentStyle}
+      >
         {isLoading ? (
           <div className="flex items-center justify-center py-8">
-            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
+            <div
+              className="animate-spin rounded-full h-8 w-8 border-2 border-transparent"
+              style={spinnerStyle}
+            ></div>
           </div>
         ) : error ? (
-          <div className="text-center py-8 text-red-600 dark:text-red-400">
+          <div className="text-center py-8 font-medium" style={errorStyle}>
             Error loading occurrences
           </div>
         ) : occurrences && occurrences.length > 0 ? (
@@
         ) : (
-          <div className="text-center py-8 text-gray-600 dark:text-gray-300">
+          <div className="text-center py-8 text-sm font-medium" style={emptyStyle}>
             No other occurrences found
           </div>
         )}
       </div>
     </div>
   );
 }

